"use strict";(self.webpackChunkessentials_security=self.webpackChunkessentials_security||[]).push([[5036],{5680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>c});var r=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),g=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=g(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=g(t),m=a,c=p["".concat(l,".").concat(m)]||p[m]||y[m]||i;return t?r.createElement(c,s(s({ref:n},d),{},{components:t})):r.createElement(c,s({ref:n},d))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=m;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[p]="string"==typeof e?e:a,s[1]=o;for(var g=2;g<i;g++)s[g]=t[g];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6542:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>y,frontMatter:()=>i,metadata:()=>o,toc:()=>g});var r=t(8168),a=(t(6540),t(5680));const i={},s="Registers",o={unversionedId:"Binary Introduction/Assembly Language/Reading/registers",id:"Binary Introduction/Assembly Language/Reading/registers",title:"Registers",description:"You might have already seen the image below.",source:"@site/docs/Binary Introduction/Assembly Language/Reading/registers.md",sourceDirName:"Binary Introduction/Assembly Language/Reading",slug:"/Binary Introduction/Assembly Language/Reading/registers",permalink:"/essentials-security/7/Binary Introduction/Assembly Language/Reading/registers",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Introduction",permalink:"/essentials-security/7/Binary Introduction/Assembly Language/Reading/introduction"},next:{title:"Assembly Instructions",permalink:"/essentials-security/7/Binary Introduction/Assembly Language/Reading/assembly-instructions"}},l={},g=[{value:"Registers in an X64 CPU",id:"registers-in-an-x64-cpu",level:2},{value:"<code>rip</code>",id:"rip",level:3},{value:"General Purpose Registers",id:"general-purpose-registers",level:3},{value:"Smaller Registers",id:"smaller-registers",level:3}],d={toc:g},p="wrapper";function y(e){let{components:n,...i}=e;return(0,a.yg)(p,(0,r.A)({},d,i,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"registers"},"Registers"),(0,a.yg)("p",null,'You might have already seen the image below.\nIt shows the various places where data can be kept.\nNote that this data can be both non-persistent and persistent.\nNon-persistent data is gone once you shut down the computer.\nIt\'s kept in all levels from "Main Memory" upwards.\nThe "Main Memory" is simply referred to as ',(0,a.yg)("strong",{parentName:"p"},"memory")," or RAM."),(0,a.yg)("p",null,"Persistent storage refers to data on ",(0,a.yg)("strong",{parentName:"p"},"disks"),": HDD, SSD, CDs, DVDs, magnetic tapes, even in the cloud (where cloud storage providers also use HDDs, SSDs etc.).\nIf you shut down your laptop or your mobile phone, your pictures or video games remain unchanged.\nThis is because they are stored ",(0,a.yg)("em",{parentName:"p"},"on your device's disk"),".\nWe simply refer to persistent storage as ",(0,a.yg)("strong",{parentName:"p"},"storage"),".\nTake note of the difference between ",(0,a.yg)("em",{parentName:"p"},"storage")," and ",(0,a.yg)("em",{parentName:"p"},"memory"),"."),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"Memory Hierarchy",src:t(6486).A,width:"1567",height:"1010"})),(0,a.yg)("p",null,"In most programming languages you can freely access data everywhere up to and including the memory.\nIn assembly however, you also have access to the ",(0,a.yg)("strong",{parentName:"p"},"registers")," and can influence the ",(0,a.yg)("strong",{parentName:"p"},"cache"),".\nWe won't be dealing with the cache in this session, but you can read more about them ",(0,a.yg)("a",{parentName:"p",href:"/essentials-security/7/Binary%20Introduction/Assembly%20Language/Reading/further-reading#caches"},"here"),"\nThey are the fastest form of memory available and are implemented ",(0,a.yg)("strong",{parentName:"p"},"inside the CPU"),".\nWe can access data in registers in less than 1 ns (nanoseconds), as opposed to a few dozen ns when fetching data from the RAM."),(0,a.yg)("p",null,"Then why not make more registers and only use them instead of RAM?\nRegisters are fast because they are few in number.\nThis allows them to be efficiently wired to the CPU's Arithmetic and Logic Unit (ALU), which is responsible for executing basic operations, such as addition, subtraction, bitwise and, or, shifts etc.\nThe more registers, the more complex and the less efficient the logic."),(0,a.yg)("h2",{id:"registers-in-an-x64-cpu"},"Registers in an X64 CPU"),(0,a.yg)("p",null,"Registers are like variables with fixed names embedded in the CPU.\nThey can be assigned values that can be modified via instructions.\nThere are several types of registers inside a CPU.\nAll of them can be assigned data and that data can be modified using the assembly-level operations described ",(0,a.yg)("a",{parentName:"p",href:"/essentials-security/7/Binary%20Introduction/Assembly%20Language/Reading/assembly-instructions"},"further in this session"),"."),(0,a.yg)("p",null,"All registers are ",(0,a.yg)("strong",{parentName:"p"},"64-bits")," wide.\nSo they each can store up to 8 bytes of data."),(0,a.yg)("h3",{id:"rip"},(0,a.yg)("inlineCode",{parentName:"h3"},"rip")),(0,a.yg)("p",null,"We'll start with a very special and illusive one: the ",(0,a.yg)("strong",{parentName:"p"},"instruction pointer")," - ",(0,a.yg)("inlineCode",{parentName:"p"},"rip"),".\nIn ",(0,a.yg)("a",{parentName:"p",href:"../../Binary%20Analysis/"},"the previous session"),', you learned that the code of any process is also in its memory.\nIn order to read and execute it, the CPU must "follow" it just like children follow text with their fingers.\nThe CPU does this using ',(0,a.yg)("inlineCode",{parentName:"p"},"rip"),".\nThis register stores te ",(0,a.yg)("strong",{parentName:"p"},"address of the currently executed instruction"),".\nWe will never use this instruction per-se in instructions, but you will see and make use of it in GDB."),(0,a.yg)("h3",{id:"general-purpose-registers"},"General Purpose Registers"),(0,a.yg)("p",null,"Then there are ",(0,a.yg)("strong",{parentName:"p"},"general purpose registers"),".\nAs their name implies, they are used to store ",(0,a.yg)("em",{parentName:"p"},"anything"),": addresses, user input, function parameters, data read from files or from the web etc.\nSome of them also have some special functions, especially regarding function calls:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"rax"),": accumulator register"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"rbx"),": base register"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"rcx"),": counter register; used with the ",(0,a.yg)("a",{parentName:"li",href:"/essentials-security/7/Binary%20Introduction/Assembly%20Language/Reading/assembly-instructions#loops"},(0,a.yg)("inlineCode",{parentName:"a"},"loop"))," instruction"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"rdx"),": data register"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"rdi"),": destination register"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"Rsi"),": source register"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"r8"),", ",(0,a.yg)("inlineCode",{parentName:"li"},"r9")," ... ",(0,a.yg)("inlineCode",{parentName:"li"},"r15"),": regular registers")),(0,a.yg)("p",null,"Do not learn them by heart.\nAnd also do not bother with their extra meanings.\nWe will make use of those only when specified.\nOtherwise, treat them as simple variables."),(0,a.yg)("h3",{id:"smaller-registers"},"Smaller Registers"),(0,a.yg)("p",null,"Sometimes you only need to access 32 or 16 or 8 bits out of a 64-bit register.\nThis is possible by slightly changing the name of the register like so:"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:"center"},"64 bits"),(0,a.yg)("th",{parentName:"tr",align:"center"},"Lowe 32 bits"),(0,a.yg)("th",{parentName:"tr",align:"center"},"Lower 16 bits"),(0,a.yg)("th",{parentName:"tr",align:"center"},"High 8 bits"),(0,a.yg)("th",{parentName:"tr",align:"center"},"Low 8 bits"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"center"},(0,a.yg)("inlineCode",{parentName:"td"},"rax")),(0,a.yg)("td",{parentName:"tr",align:"center"},(0,a.yg)("inlineCode",{parentName:"td"},"eax")),(0,a.yg)("td",{parentName:"tr",align:"center"},(0,a.yg)("inlineCode",{parentName:"td"},"ax")),(0,a.yg)("td",{parentName:"tr",align:"center"},(0,a.yg)("inlineCode",{parentName:"td"},"ah")),(0,a.yg)("td",{parentName:"tr",align:"center"},(0,a.yg)("inlineCode",{parentName:"td"},"al"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"center"},(0,a.yg)("inlineCode",{parentName:"td"},"rdi")),(0,a.yg)("td",{parentName:"tr",align:"center"},(0,a.yg)("inlineCode",{parentName:"td"},"edi")),(0,a.yg)("td",{parentName:"tr",align:"center"},(0,a.yg)("inlineCode",{parentName:"td"},"di")),(0,a.yg)("td",{parentName:"tr",align:"center"},"inaccessible"),(0,a.yg)("td",{parentName:"tr",align:"center"},(0,a.yg)("inlineCode",{parentName:"td"},"dil"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"center"},(0,a.yg)("inlineCode",{parentName:"td"},"r8")),(0,a.yg)("td",{parentName:"tr",align:"center"},(0,a.yg)("inlineCode",{parentName:"td"},"r8d")),(0,a.yg)("td",{parentName:"tr",align:"center"},(0,a.yg)("inlineCode",{parentName:"td"},"r8w")),(0,a.yg)("td",{parentName:"tr",align:"center"},"inaccessible"),(0,a.yg)("td",{parentName:"tr",align:"center"},(0,a.yg)("inlineCode",{parentName:"td"},"r8l"))))),(0,a.yg)("p",null,"The bits contained in each of the above subdivisions are shown in the image below.\nIt is similar for ",(0,a.yg)("inlineCode",{parentName:"p"},"rdi")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"r8"),", it's just the names that differ."),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"rax Subdivisions",src:t(2466).A})),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"rbx"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"rcx")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"rdx")," have the same subdivisions as ",(0,a.yg)("inlineCode",{parentName:"p"},"rax"),".\n",(0,a.yg)("inlineCode",{parentName:"p"},"rsi")," has the same subdivision as ",(0,a.yg)("inlineCode",{parentName:"p"},"rdi"),": ",(0,a.yg)("inlineCode",{parentName:"p"},"esi"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"si")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"sil"),".\nIt doesn't make sense to access 4 bytes of an address.\nThe lower 2 bytes can be accessed due to historical reasons.\nIn the 70s, when the first CPU of this family (8086) was launched, it only supported 2-byte addresses.\nAll registers ",(0,a.yg)("inlineCode",{parentName:"p"},"r9")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"r15")," have the same subdivisions as ",(0,a.yg)("inlineCode",{parentName:"p"},"r8"),"."))}y.isMDXComponent=!0},6486:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/memory-hierarchy-4d4374f26fd02d44a54142b710c3c169.png"},2466:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/rax-subdivisions-30bbbba21a1b4eda4afd00d37e4ed801.svg"}}]);