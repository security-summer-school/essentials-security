"use strict";(self.webpackChunkessentials_security=self.webpackChunkessentials_security||[]).push([[3153],{5680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>m});var a=t(6540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),u=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=u(e.components);return a.createElement(l.Provider,{value:n},e.children)},y="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),y=u(t),p=i,m=y["".concat(l,".").concat(p)]||y[p]||d[p]||r;return t?a.createElement(m,s(s({ref:n},c),{},{components:t})):a.createElement(m,s({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,s=new Array(r);s[0]=p;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[y]="string"==typeof e?e:i,s[1]=o;for(var u=2;u<r;u++)s[u]=t[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8364:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var a=t(8168),i=(t(6540),t(5680));const r={},s="Static Analysis",o={unversionedId:"Binary Introduction/Binary Analysis/Reading/static-analysis",id:"Binary Introduction/Binary Analysis/Reading/static-analysis",title:"Static Analysis",description:"Static analysis implies investigating the binary without running it.",source:"@site/docs/Binary Introduction/Binary Analysis/Reading/static-analysis.md",sourceDirName:"Binary Introduction/Binary Analysis/Reading",slug:"/Binary Introduction/Binary Analysis/Reading/static-analysis",permalink:"/essentials-security/15/Binary Introduction/Binary Analysis/Reading/static-analysis",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Introduction",permalink:"/essentials-security/15/Binary Introduction/Binary Analysis/Reading/introduction"},next:{title:"Dynamic Analysis",permalink:"/essentials-security/15/Binary Introduction/Binary Analysis/Reading/dynamic-analysis"}},l={},u=[{value:"strings",id:"strings",level:2},{value:"file",id:"file",level:2},{value:"Counter-measures",id:"counter-measures",level:3},{value:"nm",id:"nm",level:2},{value:"Counter-measures: Strip",id:"counter-measures-strip",level:3},{value:"objdump",id:"objdump",level:2},{value:"Counter-measures",id:"counter-measures-1",level:3},{value:"Ghidra",id:"ghidra",level:2},{value:"Counter-measures",id:"counter-measures-2",level:3}],c={toc:u},y="wrapper";function d(e){let{components:n,...t}=e;return(0,i.yg)(y,(0,a.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"static-analysis"},"Static Analysis"),(0,i.yg)("p",null,"Static analysis implies investigating the binary without running it.\nThis means looking into the effective binary file for strings, symbols, interesting addresses and so on."),(0,i.yg)("h2",{id:"strings"},"strings"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"strings")," is used to find strings in a binary file - very intuitive.\nIt is the most basic static analysis tool available.\nBefore any other more complex analysis takes place, a ",(0,i.yg)("inlineCode",{parentName:"p"},"strings")," can find many hidden secrets."),(0,i.yg)("h2",{id:"file"},"file"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"file")," is another useful tool, not only for binary analysis.\nIt should be used before any investigation, to make sure that the binary is a binary file, and not an archive.\nIt also shows if the executable is statically-linked (lots of strings, functions) or dynamically-linked."),(0,i.yg)("h3",{id:"counter-measures"},"Counter-measures"),(0,i.yg)("p",null,"For ",(0,i.yg)("inlineCode",{parentName:"p"},"file")," there is no counter-measure to hide the data that would be found by it.\nFor ",(0,i.yg)("inlineCode",{parentName:"p"},"strings"),", one way to counter it is to encrypt / obfuscate important data.\nBut keep in mind that the codified content will be visible, and can be deciphered.\nThat's why they are, almost always, used first when analysing a binary."),(0,i.yg)("h2",{id:"nm"},"nm"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"nm")," is used to find ",(0,i.yg)("strong",{parentName:"p"},"symbols")," - variable names, function names, and their addresses.\nIt also shows where these symbols are placed: text (T or t), rodata (R or r), bss (B or b), etc.\n",(0,i.yg)("a",{parentName:"p",href:"https://www.thegeekstuff.com/2012/03/linux-nm-command/"},"Here")," you can find all the symbols' meaning."),(0,i.yg)("p",null,"The difference between capital-letter symbols and lowercase symbols is the following:\nCapital-letter symbols are global, meaning they can be referenced from other object files.\nExample: ",(0,i.yg)("inlineCode",{parentName:"p"},"object1.o")," has a global symbol named ",(0,i.yg)("inlineCode",{parentName:"p"},"global_var"),".\n",(0,i.yg)("inlineCode",{parentName:"p"},"object2.o")," can use ",(0,i.yg)("inlineCode",{parentName:"p"},"global_var"),", if ",(0,i.yg)("inlineCode",{parentName:"p"},"object1.o")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"object2.o")," are linked together."),(0,i.yg)("h3",{id:"counter-measures-strip"},"Counter-measures: Strip"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"strip")," removes all symbols from a binary file.\nIf a binary is stripped, ",(0,i.yg)("inlineCode",{parentName:"p"},"nm")," becomes useless."),(0,i.yg)("h2",{id:"objdump"},"objdump"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"objdump")," is a disassembler.\nIt takes binary files and transforms them to hexadecimal values and, where possible, assembly language.\nIt is useful in many cases: when we want to explore the sections of a program, when we want to see what a specific function does, or when we want to make sure that the binary won't crash more complex analysis tools (!).\n",(0,i.yg)("inlineCode",{parentName:"p"},"objdump")," is a fast way to turn a binary file into more accessible format."),(0,i.yg)("h3",{id:"counter-measures-1"},"Counter-measures"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"objdump")," is pretty good at what it must do.\nIt becomes less helpful if the binary is large, with multiple functions that call each other and we have a hard time understanding the flow of the application.\nThat's why it is a bad idea, generally, to break down real-life applications with ",(0,i.yg)("inlineCode",{parentName:"p"},"objdump"),"."),(0,i.yg)("h2",{id:"ghidra"},"Ghidra"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"Ghidra")," is a decompiler: it turns a binary file back into C code.\nIt also does function analysis, meaning it constructs a tree of function calls.\nIt is the best tool to understand what a binary does, without running it."),(0,i.yg)("h3",{id:"counter-measures-2"},"Counter-measures"),(0,i.yg)("p",null,"Unorthodox code, self-changing code, polymorphic code and other measures were taken by various people to counter Ghidra.\n",(0,i.yg)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=HlUe0TUHOIc&ab_channel=DEFCONConference"},"This talk")," by Christopher Domas is one of the best examples of measures taken to counter Ghidra and other decompilers."))}d.isMDXComponent=!0}}]);