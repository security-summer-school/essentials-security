"use strict";(self.webpackChunkessentials_security=self.webpackChunkessentials_security||[]).push([[9973],{5680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>y});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(t),d=r,y=u["".concat(c,".").concat(d)]||u[d]||f[d]||i;return t?a.createElement(y,o(o({ref:n},p),{},{components:t})):a.createElement(y,o({ref:n},p))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2458:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=t(8168),r=(t(6540),t(5680));const i={},o="Function Calls",l={unversionedId:"Binary Introduction/Taming the Stack/Guides/Function Calls/README",id:"Binary Introduction/Taming the Stack/Guides/Function Calls/README",title:"Function Calls",description:"Use objdump to investigate the prologue of the readarray() and printarray() functions.",source:"@site/docs/Binary Introduction/Taming the Stack/Guides/Function Calls/README.md",sourceDirName:"Binary Introduction/Taming the Stack/Guides/Function Calls",slug:"/Binary Introduction/Taming the Stack/Guides/Function Calls/",permalink:"/essentials-security/Binary Introduction/Taming the Stack/Guides/Function Calls/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Guides",permalink:"/essentials-security/Binary Introduction/Taming the Stack/Guides/"}},c={},s=[],p={toc:s},u="wrapper";function f(e){let{components:n,...t}=e;return(0,r.yg)(u,(0,a.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"function-calls"},"Function Calls"),(0,r.yg)("p",null,"Use ",(0,r.yg)("inlineCode",{parentName:"p"},"objdump")," to investigate the prologue of the ",(0,r.yg)("inlineCode",{parentName:"p"},"read_array()")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"print_array()")," functions."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-console"},"root@kali:~$ objdump -d -M intel main\n")),(0,r.yg)("p",null,"Notice how in the prologue, ",(0,r.yg)("inlineCode",{parentName:"p"},"ebp")," saves the ",(0,r.yg)("inlineCode",{parentName:"p"},"esp")," value before the local variables are stored on stack:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-asm"},"080491a6 <read_array>:\n 80491a6:       55                      push   ebp\n 80491a7:       89 e5                   mov    ebp,esp\n 80491a9:       83 ec 18                sub    esp,0x18\n 80491ac:       83 ec 08                sub    esp,0x8\n")),(0,r.yg)("p",null,"What's more, take a closer look at how the parameters are handled:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-asm"}," 80491af:       ff 75 0c                push   DWORD PTR [ebp+0xc] ; the second argument of read_array()\n 80491b2:       68 08 a0 04 08          push   0x804a008\n 80491b7:       e8 c4 fe ff ff          call   8049080 <__isoc99_scanf@plt>\n\n 8049213:       8b 45 08                mov    eax,DWORD PTR [ebp+0x8] ; the first argument of print_array()\n")),(0,r.yg)("p",null,"Now, inside ",(0,r.yg)("inlineCode",{parentName:"p"},"gdb"),", let's take a look at where the return address is saved:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-console"},"pwndbg> info frame\nStack level 0, frame at 0xffffcd30:\n eip = 0x80491ac in read_array (main.c:5); saved eip = 0x8049273\n Saved registers:\n  ebp at 0xffffcd28, eip at 0xffffcd2c\n\npwndbg> x 0xffffcd2c\n0xffffcd2c:     0x08049273\n")),(0,r.yg)("p",null,"Let's do the math:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"ebp")," points at ",(0,r.yg)("inlineCode",{parentName:"li"},"0xffffcd28")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"ebp + 4")," will then point at ",(0,r.yg)("inlineCode",{parentName:"li"},"0xffffcd2c")),(0,r.yg)("li",{parentName:"ul"},"the value stored at ",(0,r.yg)("inlineCode",{parentName:"li"},"0xffffcd2c")," is ",(0,r.yg)("inlineCode",{parentName:"li"},"0x08049273"),", the same as the one from the saved ",(0,r.yg)("inlineCode",{parentName:"li"},"eip"))))}f.isMDXComponent=!0}}]);