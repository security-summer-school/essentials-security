"use strict";(self.webpackChunkessentials_security=self.webpackChunkessentials_security||[]).push([[6122],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>g});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),h=a,g=u["".concat(c,".").concat(h)]||u[h]||d[h]||s;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9871:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=n(8168),a=(n(6540),n(5680));const s={},o="Functions and the Stack",i={unversionedId:"Binary Introduction/Taming the Stack/Reading/functions-and-the-stack",id:"Binary Introduction/Taming the Stack/Reading/functions-and-the-stack",title:"Functions and the Stack",description:"Every function has two classes of values, usually stored on stack, extremely important for its well-being:",source:"@site/docs/Binary Introduction/Taming the Stack/Reading/functions-and-the-stack.md",sourceDirName:"Binary Introduction/Taming the Stack/Reading",slug:"/Binary Introduction/Taming the Stack/Reading/functions-and-the-stack",permalink:"/essentials-security/Binary Introduction/Taming the Stack/Reading/functions-and-the-stack",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Stack",permalink:"/essentials-security/Binary Introduction/Taming the Stack/Reading/stack"},next:{title:"Summary",permalink:"/essentials-security/Binary Introduction/Taming the Stack/Reading/summary"}},c={},l=[{value:"<code>ebp</code>, the Stack Frame",id:"ebp-the-stack-frame",level:2},{value:"The Return Address",id:"the-return-address",level:2},{value:"The Parameters",id:"the-parameters",level:2}],p={toc:l},u="wrapper";function d(e){let{components:t,...s}=e;return(0,a.yg)(u,(0,r.A)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"functions-and-the-stack"},"Functions and the Stack"),(0,a.yg)("p",null,"Every function has two classes of values, usually stored on stack, extremely important for its well-being:"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"the return address")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"the parameters / arguments"))),(0,a.yg)("p",null,"Meddling with these might get you to a big fat ",(0,a.yg)("strong",{parentName:"p"},"SEGFAULT")," or to great power."),(0,a.yg)("h2",{id:"ebp-the-stack-frame"},(0,a.yg)("inlineCode",{parentName:"h2"},"ebp"),", the Stack Frame"),(0,a.yg)("p",null,"But before discussing that, we have to bring light to another obscure register, ",(0,a.yg)("inlineCode",{parentName:"p"},"ebp"),".\nWe kind of used it before, in our journey, as it has a great advantage.\nIt stores the stack pointer value right before the stack begins to hold local variables and preserved register values.\nIn other words, it keeps a pointer to the stack at the beginning of the function, enabling us to actually move freely through the stack.\nWe will, now, refer to values stored on it, even though they are not the last ones."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-asm"},"push ebp\nmov ebp, esp\n\npush dword 3\npush dword 4\npush dword 5\n\n; at this point esp decreased its value with 3 * 4 = 12 bytes\n; traditionally we can access the last value only,\n; however the stack is like an array, so we will use the pointers\n; it offers us\n\nmov eax, [esp + 8] ; eax = 3\nmov eax, [ebp - 4] ; eax = 3\n")),(0,a.yg)("h2",{id:"the-return-address"},"The Return Address"),(0,a.yg)("p",null,"The return address of a function is one of the ",(0,a.yg)("strong",{parentName:"p"},"most targeted")," piece of information in an attack.\nThere is even a special class of attacks that takes its name from it, ",(0,a.yg)("a",{parentName:"p",href:"https://security-summer-school.github.io/binary/return-oriented-programming/"},"ROP")," (Return Oriented Programming).\nMoreover, the return address can also be defined as a ",(0,a.yg)("strong",{parentName:"p"},"code pointer"),", a pointer that stores the address of an instruction.\nRemember how the instructions were stored in the code or text section, hence the ",(0,a.yg)("strong",{parentName:"p"},"code pointer")," label."),(0,a.yg)("p",null,"The reason for this kind of popularity is obvious: it represents one of the rare instances when the program ",(0,a.yg)("strong",{parentName:"p"},"performs a jump to a code pointer saved on stack"),", which, combined with the stupidity or the laziness of the programmer, can result in a nasty backdoor to the system."),(0,a.yg)("p",null,"The address at which the return address is usually stored on x86 systems is ",(0,a.yg)("inlineCode",{parentName:"p"},"[ebp + 4]"),"."),(0,a.yg)("h2",{id:"the-parameters"},"The Parameters"),(0,a.yg)("p",null,"The parameters follow a similar story to that of the return address, with a slight modification, though.\nOn 64-bit x86 they are placed in special registers, if possible.\nIf the number of parameters is high, they would get transmitted using the stack, just as it happens, on 32-bit x86."),(0,a.yg)("p",null,"The address at which the first parameter gets stored on 32-bit x86 systems is ",(0,a.yg)("inlineCode",{parentName:"p"},"ebp + 8"),"."),(0,a.yg)("p",null,"The address at which the second parameter gets stored on 32-bit x86 systems is ",(0,a.yg)("inlineCode",{parentName:"p"},"ebp + 12"),"."),(0,a.yg)("p",null,"The address at which the third parameter gets stored on 32-bit x86 systems is ",(0,a.yg)("inlineCode",{parentName:"p"},"ebp + 16"),"."),(0,a.yg)("p",null,"And so on."),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"parameters and ebp",src:n(6801).A,width:"1103",height:"679"})))}d.isMDXComponent=!0},6801:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/function-stack-063a298625f20989673548d0ebe780a7.jpg"}}]);