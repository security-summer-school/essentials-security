"use strict";(self.webpackChunkessentials_security=self.webpackChunkessentials_security||[]).push([[5054],{5680:(e,t,n)=>{n.d(t,{xA:()=>h,yg:()=>u});var a=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},h=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},g="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,h=o(e,["components","mdxType","originalType","parentName"]),g=p(n),y=r,u=g["".concat(l,".").concat(y)]||g[y]||m[y]||i;return n?a.createElement(u,s(s({ref:t},h),{},{components:n})):a.createElement(u,s({ref:t},h))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=y;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[g]="string"==typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},7212:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(8168),r=(n(6540),n(5680));const i={},s="HyperText Transfer Protocol (HTTP)",o={unversionedId:"Demystifying the Web/Re-Discovering the Browser/Reading/http",id:"Demystifying the Web/Re-Discovering the Browser/Reading/http",title:"HyperText Transfer Protocol (HTTP)",description:"As its name implies, HTTP was initially used to transfer text-based data, because when it was proposed in 1991, that's what its creators imagined the internet was going to be: a collection of text files.",source:"@site/docs/Demystifying the Web/Re-Discovering the Browser/Reading/http.md",sourceDirName:"Demystifying the Web/Re-Discovering the Browser/Reading",slug:"/Demystifying the Web/Re-Discovering the Browser/Reading/http",permalink:"/essentials-security/Demystifying the Web/Re-Discovering the Browser/Reading/http",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"AAA",permalink:"/essentials-security/Demystifying the Web/Re-Discovering the Browser/Reading/triple-a"},next:{title:"Browsers",permalink:"/essentials-security/Demystifying the Web/Re-Discovering the Browser/Reading/browsers"}},l={},p=[{value:"HTTPS",id:"https",level:2},{value:"Requests and Responses",id:"requests-and-responses",level:2},{value:"Requests",id:"requests",level:3},{value:"Responses",id:"responses",level:3},{value:"Query Parameters",id:"query-parameters",level:2},{value:"Request Body",id:"request-body",level:2}],h={toc:p},g="wrapper";function m(e){let{components:t,...i}=e;return(0,r.yg)(g,(0,a.A)({},h,i,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"hypertext-transfer-protocol-http"},"HyperText Transfer Protocol (HTTP)"),(0,r.yg)("p",null,"As its name implies, HTTP was initially used to transfer text-based data, because when it was proposed in 1991, that's what its creators imagined the internet was going to be: a collection of text files.\nLater versions of HTTP started to accommodate more types of data, including video, audio and even raw bytes.\nNowadays, you can send anything via HTTP.\nStill, one of the main things that browsers receive via HTTP is ",(0,r.yg)("strong",{parentName:"p"},"HTML (HyperText Markup Language)"),".\nWe'll dive into HTML ",(0,r.yg)("a",{parentName:"p",href:"/essentials-security/Demystifying%20the%20Web/Re-Discovering%20the%20Browser/Reading/browsers#html"},"a bit later in this session"),"."),(0,r.yg)("p",null,'Notice that both HTTP and HTML contain the word "HyperText".\nIt refers to a property of websites to contain ',(0,r.yg)("strong",{parentName:"p"},"references")," to other websites or to other parts of the same website, thus creating a ",(0,r.yg)("em",{parentName:"p"},"web-like structure of the internet"),", thus the ",(0,r.yg)("em",{parentName:"p"},"World-Wide Web"),".\nMarkdown is another hypertext language.\nWe use Markdown to write text content for the Security Summer School.\nWe can use references to ",(0,r.yg)("a",{parentName:"p",href:"/essentials-security/Demystifying%20the%20Web/Re-Discovering%20the%20Browser/Reading/further-reading#further-reading"},"other sections of the same document"),", or to ",(0,r.yg)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=jIQ6UV2onyI"},"other websites")," entirely."),(0,r.yg)("p",null,"As you may remember from ",(0,r.yg)("a",{parentName:"p",href:"../explaining-the-internet/"},"the previous session"),", HTTP is an application-layer protocol.\nThis means it sits at the top of the TCP/IP stack and mostly receives and sends user data from and to its underlying transport protocol.\nAs the transferred data is mostly text, error checking is important.\nThus, the transport-layer protocol used by HTTP is TCP."),(0,r.yg)("p",null,"Most websites nowadays use HTTP or HTTPS to transfer data.\nRemember the anatomy of a URL, also from ",(0,r.yg)("a",{parentName:"p",href:"../explaining-the-internet#anatomy-of-a-url"},"the previous session"),"."),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Anatomy of a URL",src:n(6618).A,width:"2493",height:"241"})),(0,r.yg)("p",null,"The first part of a URL is called the ",(0,r.yg)("strong",{parentName:"p"},"scheme"),".\nIt defines the protocol used for interacting with that website.\nIn the example above, the scheme is ",(0,r.yg)("inlineCode",{parentName:"p"},"http"),", i.e. messages to and from the website ",(0,r.yg)("inlineCode",{parentName:"p"},"www.example.com")," will be passed using HTTP.\nBy default, HTTP uses port 80 to listen for connections, but we can use any other port we want.\nUsually, these ports are in the 8000 - 8099 range to maintain some visual consistency with the original port."),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"http")," scheme isn't so common now.\nMost websites you visit on a daily basis use a different scheme: ",(0,r.yg)("inlineCode",{parentName:"p"},"https"),".\n",(0,r.yg)("inlineCode",{parentName:"p"},"security-summer-school.github.io"),", for example, uses HTTPS."),(0,r.yg)("h2",{id:"https"},"HTTPS"),(0,r.yg)("p",null,"HTTPS stands for HTTP ",(0,r.yg)("strong",{parentName:"p"},"Secure"),".\nAs we're going to see in the ",(0,r.yg)("a",{parentName:"p",href:"#requests-and-responses"},"next section"),", HTTP sends data in clear text.\nThis means that any attacker can intercept network traffic and see what data is being transferred.\nHTTPS was developed to remedy this vulnerability.\nInstead of being built on top of TCP, HTTPS is built on top of ",(0,r.yg)("em",{parentName:"p"},"yet another application-level-protocol"),": ",(0,r.yg)("strong",{parentName:"p"},"Transport Layer Security (TLS)"),".\nTLS allows data sent via HTTPS to be encrypted, thus making it unintelligible for attackers."),(0,r.yg)("h2",{id:"requests-and-responses"},"Requests and Responses"),(0,r.yg)("p",null,"HTTP has 4 properties that have allowed it to become ubiquitous in the internet:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"Statelessness:")," by default HTTP is a simple request-response protocol maintaining no state between successive communications.\nIts design specifies that ",(0,r.yg)("strong",{parentName:"p"},"every"),' request is independent from any other.\nThis is good for designing a web server as it makes it simpler and cleaner, but what if that server is Facebook?\nOnce you log in, you want it to "remember" who you are so you can still be logged in after more than 1 click.\nA stateless protocol cannot do this.\nThis shortcoming has led to the design of cookies, which are small pieces of information exchanged between the client and the web application.\nThey are used to "remind" the server who the client is upon each request.\nWe\'ll discuss cookies in ',(0,r.yg)("a",{parentName:"p",href:"../hacking-the-web/#cookies"},"the next session"),".")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"Message format:")," HTTP requests have a specific format.\nNamely, they are comprised of plain-text header and data (although newer improvements also implement a binary protocol).\nThe header contains various information about the client or the server (e.g. a user-agent, page caching information, text encoding information), while the payload is very often (but not always) an HTML page.")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"Addressing:")," resources on the web are located using the URL addressing scheme.\nPossible vulnerabilities here include a misconfigured web server that allows viewing application-specific files, or worse, that allows accessing other files on the host machine.\nWhile this information leakage is not very dangerous by itself, it may be used as an intermediary stage for other attacks.\nYou can read more about URLs ",(0,r.yg)("a",{parentName:"p",href:"https://skorks.com/2010/05/what-every-developer-should-know-about-urls/"},"here"),".")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"Request methods:")," HTTP communication is done by using methods, also called HTTP verbs.\nThe most used methods are ",(0,r.yg)("inlineCode",{parentName:"p"},"GET"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"POST"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"PUT")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"DELETE"),"."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre"},"- The `GET` method is read-only and is used to retrieve data from the server.\n- A `DELETE` request is used to remove the specified resource from the server.\n- The `PUT` method is used to modify an entire resource.\n- `POST` requests are used to create new resources.\n")))),(0,r.yg)("p",null,"You can find more information about all existing methods ",(0,r.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods"},"here"),"."),(0,r.yg)("p",null,"Communication between a client and a server usually follows these steps:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"A client (a browser) sends an HTTP request to the web."),(0,r.yg)("li",{parentName:"ol"},"A web server receives the request."),(0,r.yg)("li",{parentName:"ol"},"The server runs an application to process the request."),(0,r.yg)("li",{parentName:"ol"},"The server returns an HTTP response (output) to the browser."),(0,r.yg)("li",{parentName:"ol"},"The client (the browser) receives the response.")),(0,r.yg)("h3",{id:"requests"},"Requests"),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"HTTP - Request",src:n(3403).A,width:"775",height:"493"})),(0,r.yg)("p",null,"Here we have a ",(0,r.yg)("inlineCode",{parentName:"p"},"GET")," request.\nIt is made for a file: ",(0,r.yg)("inlineCode",{parentName:"p"},"/index.html"),"."),(0,r.yg)("p",null,"Remember the ",(0,r.yg)("strong",{parentName:"p"},"path")," from the anatomy of a URL:"),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Anatomy of a URL Again",src:n(6618).A,width:"2493",height:"241"})),(0,r.yg)("p",null,"This is the file that you request.\nThe path is like a path in the Linux file system.\nIn the image above, the request asks for the file ",(0,r.yg)("inlineCode",{parentName:"p"},"/path/to/myfile.html"),".\nSo the request would look something like:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-console"},"GET /path/to/myfile.html HTTP/1.1\n[...]\n")),(0,r.yg)("p",null,"Below the first line in the picture that precedes the anatomy of a URL, we can find the ",(0,r.yg)("strong",{parentName:"p"},"headers")," of the request.\nThey are metadata used to provide additional information about the connection, about the client and about how to handle the request.\nSome usual headers are:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Host:")," indicates the desired host handling the request"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Accept:")," indicates what MIME type(s) are accepted by the client; often used to specify JSON or XML output for web-services"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Cookie:")," passes cookie data to the server"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Referrer:")," page leading to this request (note: this is not passed to other servers when using HTTPS on the origin)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Authorization:"),' used for basic auth pages (mainly).\nIt takes the form "Basic <username:password encoded with base64 >"\nDon\'t worry about what ',(0,r.yg)("inlineCode",{parentName:"li"},"base64")," is now.\nWe'll explain it in the ",(0,r.yg)("a",{parentName:"li",href:"../data-representation/"},"Data Representation")," session."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"Content-Type"),":")," specifies the format of the data\nSome examples are:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"text/html")," for a HTML page"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"text/plain")," for plain text"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"application/json")," for JSON files"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"image/jpeg")," for JPEG images"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Content-Length:")," specifies the size in bytes of the ",(0,r.yg)("strong",{parentName:"li"},"body"),".\nThe body is the data that comes along with a request or response.\nIt is described in some more detail in ",(0,r.yg)("a",{parentName:"li",href:"#request-body"},"its own section"),".")),(0,r.yg)("h3",{id:"responses"},"Responses"),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"HTTP - Response",src:n(3439).A,width:"753",height:"484"})),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"1xx"),": informational responses"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"2xx"),": the request was fulfilled successfully.\nThe most common code is ",(0,r.yg)("inlineCode",{parentName:"li"},"200"),"."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"3xx"),": redirects - the request was passed to another server"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"4xx"),": client errors.\nSome very common client errors are:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"400"),": ",(0,r.yg)("strong",{parentName:"li"},"bad request")," - there's an error in the request."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"404"),": ",(0,r.yg)("strong",{parentName:"li"},"not found")," - the requested resource doesn't exist.\nFor example, in case ",(0,r.yg)("inlineCode",{parentName:"li"},"/file.txt")," doesn't exist and the client sends ",(0,r.yg)("inlineCode",{parentName:"li"},"GET /file.txt HTTP/1.1"),", the server answers with ",(0,r.yg)("inlineCode",{parentName:"li"},"404"),"."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"403"),": ",(0,r.yg)("strong",{parentName:"li"},"unauthorised")," - you don't have access to that resource.\nLet's say the file ",(0,r.yg)("inlineCode",{parentName:"li"},"secret.txt")," exists, but is only accessible to the ",(0,r.yg)("inlineCode",{parentName:"li"},"admin")," user.\nIf a regular user sends ",(0,r.yg)("inlineCode",{parentName:"li"},"GET /secret.txt HTTP/1.1"),", they would get a ",(0,r.yg)("inlineCode",{parentName:"li"},"403")," response in return."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"405"),": ",(0,r.yg)("strong",{parentName:"li"},"method not allowed")," - say a server only allows ",(0,r.yg)("inlineCode",{parentName:"li"},"GET")," and ",(0,r.yg)("inlineCode",{parentName:"li"},"POST")," methods.\nYou would get a ",(0,r.yg)("inlineCode",{parentName:"li"},"405")," response if you sent it a ",(0,r.yg)("inlineCode",{parentName:"li"},"PUT")," method, for example."))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"5xx"),": server errors")),(0,r.yg)("h2",{id:"query-parameters"},"Query Parameters"),(0,r.yg)("p",null,"This is the last time today that you'll se the image with the anatomy of a URL, we promise."),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Anatomy of a URL Yet Again",src:n(6618).A,width:"2493",height:"241"})),(0,r.yg)("p",null,"Look at the ",(0,r.yg)("strong",{parentName:"p"},"parameters")," of the URL\nThey are highlighted in blue.\nQuery parameters are key-value pairs that the server can retrieve from the request.\nSo in our example, the server can see that ",(0,r.yg)("inlineCode",{parentName:"p"},"key1")," has the value ",(0,r.yg)("inlineCode",{parentName:"p"},"value1")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"value2")," corresponds to ",(0,r.yg)("inlineCode",{parentName:"p"},"key2"),"."),(0,r.yg)("p",null,"Think of HTTP queries/requests (",(0,r.yg)("inlineCode",{parentName:"p"},"GET"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"POST"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"PUT")," etc.) as ",(0,r.yg)("strong",{parentName:"p"},"functions"),".\nThey return something (the codes explained in the earlier section and sometimes data, like in the case of ",(0,r.yg)("inlineCode",{parentName:"p"},"GET"),") and might have side effects (",(0,r.yg)("inlineCode",{parentName:"p"},"POST"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"PUT"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"DELETE")," come to mind here).\nEach pair of ",(0,r.yg)("strong",{parentName:"p"},"path and method")," is equivalent to a function.\nIn any programming language, functions also take arguments.\nThese arguments are the query parameters of a request.\nAnd just like function arguments, they provide input to the server, values by which the client can alter its behaviour."),(0,r.yg)("h2",{id:"request-body"},"Request Body"),(0,r.yg)("p",null,"Obviously, HTTP requests may also contain raw data.\nFor example, if we use a ",(0,r.yg)("inlineCode",{parentName:"p"},"POST")," method, we also have to provide the data to be saved on the server.\nNotice that the field ",(0,r.yg)("inlineCode",{parentName:"p"},"Content-Length")," from the header of the request must contain the length of the ",(0,r.yg)("strong",{parentName:"p"},"body"),".\nOtherwise, the server may discard any bytes that exceed the specified ",(0,r.yg)("inlineCode",{parentName:"p"},"Content-Length"),"."))}m.isMDXComponent=!0},3403:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/http-request-523dd8c5a326fadf7b1f8cfd34212c02.png"},3439:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/http-response-87929a991f6c12682ef693ea0c322a33.png"},6618:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/url_anatomy-2117376844f75b5ca2e26272684cf986.png"}}]);