"use strict";(self.webpackChunkessentials_security=self.webpackChunkessentials_security||[]).push([[4953],{5680:(e,n,a)=>{a.d(n,{xA:()=>d,yg:()=>y});var t=a(6540);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=t.createContext({}),p=function(e){var n=t.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},d=function(e){var n=p(e.components);return t.createElement(l.Provider,{value:n},e.children)},m="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=p(a),c=i,y=m["".concat(l,".").concat(c)]||m[c]||g[c]||r;return a?t.createElement(y,o(o({ref:n},d),{},{components:a})):t.createElement(y,o({ref:n},d))}));function y(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=c;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[m]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=a[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}c.displayName="MDXCreateElement"},6362:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var t=a(8168),i=(a(6540),a(5680));const r={},o="Continuing Our Exploration",s={unversionedId:"Scratch Linux/System Exploration/Reading/exploration-tools",id:"Scratch Linux/System Exploration/Reading/exploration-tools",title:"Continuing Our Exploration",description:"In the challenge Did You Look Everywhere from the previous session, you had to manually look for the .flag file in the given hierarchy.",source:"@site/docs/Scratch Linux/System Exploration/Reading/exploration-tools.md",sourceDirName:"Scratch Linux/System Exploration/Reading",slug:"/Scratch Linux/System Exploration/Reading/exploration-tools",permalink:"/essentials-security/Scratch Linux/System Exploration/Reading/exploration-tools",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"System Exploration",permalink:"/essentials-security/Scratch Linux/System Exploration/Reading/introduction"},next:{title:"Inspecting Files",permalink:"/essentials-security/Scratch Linux/System Exploration/Reading/file-inspection"}},l={},p=[{value:"Tree of Life",id:"tree-of-life",level:2},{value:"Find Your Way",id:"find-your-way",level:2},{value:"<code>type</code>",id:"type",level:2},{value:"<code>size</code>",id:"size",level:2},{value:"<code>name</code>",id:"name",level:2},{value:"Globbing",id:"globbing",level:2},{value:"<code>*</code>: 0 or more characters",id:"-0-or-more-characters",level:2},{value:"<code>+</code>: one or more characters",id:"-one-or-more-characters",level:2},{value:"Ranges",id:"ranges",level:2},{value:"Sets",id:"sets",level:2},{value:"Escaping",id:"escaping",level:2},{value:"Redirecting Streams",id:"redirecting-streams",level:2},{value:"Standard Input (<code>stdin</code>)",id:"standard-input-stdin",level:2},{value:"Standard Output (<code>stdout</code>)",id:"standard-output-stdout",level:3},{value:"Standard Error (<code>stderr</code>)",id:"standard-error-stderr",level:2},{value:"Appending",id:"appending",level:2},{value:"Pipes",id:"pipes",level:2},{value:"<code>xargs</code>",id:"xargs",level:2},{value:"Less is More",id:"less-is-more",level:2},{value:"Grep",id:"grep",level:2},{value:"Grep a File Hierarchy",id:"grep-a-file-hierarchy",level:2}],d={toc:p},m="wrapper";function g(e){let{components:n,...a}=e;return(0,i.yg)(m,(0,t.A)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"continuing-our-exploration"},"Continuing Our Exploration"),(0,i.yg)("p",null,"In the challenge ",(0,i.yg)("inlineCode",{parentName:"p"},"Did You Look Everywhere")," from the previous session, you had to ",(0,i.yg)("strong",{parentName:"p"},"manually")," look for the ",(0,i.yg)("inlineCode",{parentName:"p"},".flag")," file in the given hierarchy.\nThis, as you probably remember, was slow and frustrating.\nWe need some means by which to view ",(0,i.yg)("strong",{parentName:"p"},"an entire hierarchy")," at once, or to look for specific files."),(0,i.yg)("p",null,"Good news: such means do exist."),(0,i.yg)("h2",{id:"tree-of-life"},"Tree of Life"),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"tree")," command does what its name suggests: it displays a tree representation of a directory hierarchy."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"root@kali:~# tree /lib/cryptsetup/\n/lib/cryptsetup/\n\u251c\u2500\u2500 askpass\n\u251c\u2500\u2500 checks\n\u2502\xa0\xa0 \u251c\u2500\u2500 blkid\n\u2502\xa0\xa0 \u251c\u2500\u2500 ext2\n\u2502\xa0\xa0 \u251c\u2500\u2500 swap\n\u2502\xa0\xa0 \u251c\u2500\u2500 un_blkid\n\u2502\xa0\xa0 \u2514\u2500\u2500 xfs\n\u251c\u2500\u2500 cryptdisks-functions\n\u251c\u2500\u2500 functions\n\u2514\u2500\u2500 scripts\n    \u251c\u2500\u2500 decrypt_derived\n    \u251c\u2500\u2500 decrypt_gnupg\n    \u251c\u2500\u2500 decrypt_gnupg-sc\n    \u251c\u2500\u2500 decrypt_keyctl\n    \u251c\u2500\u2500 decrypt_opensc\n    \u251c\u2500\u2500 decrypt_ssl\n    \u2514\u2500\u2500 passdev\n")),(0,i.yg)("p",null,"We can also specify a ",(0,i.yg)("strong",{parentName:"p"},"maximum depth")," for ",(0,i.yg)("inlineCode",{parentName:"p"},"tree"),"'s traversal.\nLook up the parameter in ",(0,i.yg)("inlineCode",{parentName:"p"},"tree"),"'s ",(0,i.yg)("inlineCode",{parentName:"p"},"man")," page.\nOnce you've found it, use it in order to set a maximum depth of 2 for the ",(0,i.yg)("inlineCode",{parentName:"p"},"/opt")," folder.\nYour output should look like this:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"root@kali:~# tree <add your paramtere here> /opt/\n/opt/\n\u251c\u2500\u2500 google\n\u2502\xa0\xa0 \u2514\u2500\u2500 chrome\n\u2514\u2500\u2500 Teeth\n    \u251c\u2500\u2500 cache\n    \u251c\u2500\u2500 etc\n    \u251c\u2500\u2500 housekeep\n    \u251c\u2500\u2500 README.txt\n    \u251c\u2500\u2500 static\n    \u2514\u2500\u2500 units\n")),(0,i.yg)("p",null,"Note that if you set the maximum depth to 1, ",(0,i.yg)("inlineCode",{parentName:"p"},"tree")," essentially becomes a fancier looking ",(0,i.yg)("inlineCode",{parentName:"p"},"ls"),"."),(0,i.yg)("h2",{id:"find-your-way"},"Find Your Way"),(0,i.yg)("p",null,"As far as exploration goes, ",(0,i.yg)("inlineCode",{parentName:"p"},"tree")," is a pretty strong tool.\nIt is capable of instantly displaying an entire file hierarchy."),(0,i.yg)("p",null,"But sometimes we have to deal with a large hierarchy in which we know what we're looking for."),(0,i.yg)("p",null,"As an example, let's look for the ",(0,i.yg)("inlineCode",{parentName:"p"},"memc.h")," header file of the Linux kernel.\nIt's a small file that defines a tiny part of the communication between the GPU and RAM.\nThe header files corresponding to the version of your kernel are located in ",(0,i.yg)("inlineCode",{parentName:"p"},"/usr/src/linux-headers-5.6.0-kali2-common"),".\nNow go look for ",(0,i.yg)("inlineCode",{parentName:"p"},"memc.h"),".\nGood luck!\nYou should find it by... ",(0,i.yg)("em",{parentName:"p"},"tomorrow"),"."),(0,i.yg)("p",null,"But don't look for it manually.\nThis would be stupid.\nYou know what the name of the file is and you know the folder where to ",(0,i.yg)("strong",{parentName:"p"},"find")," it.\nThat's a lot of information already.\nThere is a Linux command that's useful for looking for files with certain particularities (such as names, size, access rights etc.) in a file hierarchy.\nWhich is exactly what we need!\nThis command is called ",(0,i.yg)("inlineCode",{parentName:"p"},"find"),".\nIt outputs all files in a directory (and its subdirectories) that match some given properties.\nLook up its syntax in the ",(0,i.yg)("inlineCode",{parentName:"p"},"man"),' page.\nLook for the string "EXAMPLES".\nIt should lead you to a section at the end of the ',(0,i.yg)("inlineCode",{parentName:"p"},"man")," page, which gives you a series of detailed examples of the command's usage."),(0,i.yg)("p",null,"From them and from the commands general description at the beginning of the ",(0,i.yg)("inlineCode",{parentName:"p"},"man")," page, we can see that ",(0,i.yg)("inlineCode",{parentName:"p"},"find")," is generally used like this:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"root@kali:~# find <where to look> <what to look for>\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"<where to look>")," is quite self-explanatory: it's a path in the file system, from where ",(0,i.yg)("inlineCode",{parentName:"li"},"find")," will start to look for what we told it.\nThis means that ",(0,i.yg)("inlineCode",{parentName:"li"},"find")," traverse the file system ",(0,i.yg)("em",{parentName:"li"},"down")," from the path it's given by looking exhaustively into each of its directories."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"<what to look for>")," is where things get more interesting.\nWe've already said that we can look for files that match certain properties, such as names, permissions, sizes, types and so on.\nEach of these properties can be specified as follows:")),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"find")," can take many more parameters, as described below."),(0,i.yg)("h2",{id:"type"},(0,i.yg)("inlineCode",{parentName:"h2"},"type")),(0,i.yg)("p",null,"This parameter allows us to select either regular files (",(0,i.yg)("inlineCode",{parentName:"p"},"-type f"),"), or directories (",(0,i.yg)("inlineCode",{parentName:"p"},"-type d"),") and so on.\nHere's an example:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"find /some/random/path -type d\n")),(0,i.yg)("p",null,"This command will list all subdirectories in ",(0,i.yg)("inlineCode",{parentName:"p"},"/some/random/path"),"."),(0,i.yg)("h2",{id:"size"},(0,i.yg)("inlineCode",{parentName:"h2"},"size")),(0,i.yg)("p",null,"Filters files by size.\nFor example, we can look for all files whose sizes are 100 bytes using this command"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"find /some/random/path -size 100c\n")),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"c")," at the end specifies that we're using bytes as unit of measurement.\nThe size can also be specified in:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"kibibytes")," (1024 bytes) using the letter ",(0,i.yg)("inlineCode",{parentName:"li"},"k"),";"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"mebibytes")," (1024 kibibytes) using the letter ",(0,i.yg)("inlineCode",{parentName:"li"},"M"),";"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"gibibytes")," (1024 mebibytes) using the letter ",(0,i.yg)("inlineCode",{parentName:"li"},"G"),";")),(0,i.yg)("p",null,"But looking for files with ",(0,i.yg)("strong",{parentName:"p"},"exactly")," a given size seldom happens.\nIt is more often the case that we're looking for files ",(0,i.yg)("em",{parentName:"p"},"smaller")," or ",(0,i.yg)("em",{parentName:"p"},"larger")," than some value.\nFor this reason, we may use the ",(0,i.yg)("inlineCode",{parentName:"p"},"-")," (smaller) or ",(0,i.yg)("inlineCode",{parentName:"p"},"+")," signs before the actual size, like this:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"find /some/random/path -size +100k  # Find all files with a size larger than 100kB.\n")),(0,i.yg)("h2",{id:"name"},(0,i.yg)("inlineCode",{parentName:"h2"},"name")),(0,i.yg)("p",null,"This is the simplest property.\nIt's for when you're looking for a file with a certain name.\nFor finding the file ",(0,i.yg)("inlineCode",{parentName:"p"},"my_file"),", it goes like this:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"find /some/random/path -name my_file\n")),(0,i.yg)("p",null,"This parameter is the one we need for our current task.\nIn order to find the file ",(0,i.yg)("inlineCode",{parentName:"p"},"memc.h"),", we'll run:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"root@kali:~# find /usr/src/linux-headers-5.6.0-kali2-common/ -name memc.h\n/usr/src/linux-headers-5.6.0-kali2-common/arch/arm/include/asm/hardware/memc.h\nroot@kali:~# cat /usr/src/linux-headers-5.6.0-kali2-common/arch/arm/include/asm/hardware/memc.h\n/* SPDX-License-Identifier: GPL-2.0-only */\n[...]\n#endif\n")),(0,i.yg)("h2",{id:"globbing"},"Globbing"),(0,i.yg)("p",null,"But what if we only knew a portion of our filename?\nOr what if we intentionally wanted to find all files ending in ",(0,i.yg)("inlineCode",{parentName:"p"},".log"),", for instance?"),(0,i.yg)("p",null,"For this, we need to use the concept of ",(0,i.yg)("strong",{parentName:"p"},"globbing"),".\nThis mechanism defines a set of special characters that are interpreted differently than regular ASCII text."),(0,i.yg)("h2",{id:"-0-or-more-characters"},(0,i.yg)("inlineCode",{parentName:"h2"},"*"),": 0 or more characters"),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"*")," character is interpreted as any number of characters of any type.\nBasically, ",(0,i.yg)("inlineCode",{parentName:"p"},"*")," stands for everything and nothing.\nTake a look at the example below:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"root@kali:~# ls D*\nDesktop:\n\nDocuments:\n\nDownloads:\n")),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"*")," makes ",(0,i.yg)("inlineCode",{parentName:"p"},"ls"),"'s parameter ",(0,i.yg)("strong",{parentName:"p"},"match")," any filename that starts with ",(0,i.yg)("inlineCode",{parentName:"p"},"D"),".\nYou can use ",(0,i.yg)("inlineCode",{parentName:"p"},"*")," anywhere in your parameter.\nMoreover, any command that takes a filename as input accepts the globbing syntax.\nHere's another example:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},'root@kali:~# find /usr/src/linux-headers-5.6.0-kali2-common -name *group*  # List all linux kernel header files whose names contain the word "group"\n/usr/src/linux-headers-5.6.0-kali2-common/arch/s390/include/asm/ccwgroup.h\n[...]\n/usr/src/linux-headers-5.6.0-kali2-common/include/uapi/linux/cgroupstats.h\n')),(0,i.yg)("p",null,"The most commonly used globbing examples (apart from ",(0,i.yg)("inlineCode",{parentName:"p"},"*"),") are listed below."),(0,i.yg)("h2",{id:"-one-or-more-characters"},(0,i.yg)("inlineCode",{parentName:"h2"},"+"),": one or more characters"),(0,i.yg)("p",null,"This symbol is very similar to ",(0,i.yg)("inlineCode",{parentName:"p"},"*"),".\nHowever, ",(0,i.yg)("inlineCode",{parentName:"p"},"+")," needs at least one character in order to match the specific string."),(0,i.yg)("h2",{id:"ranges"},"Ranges"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"[]")," represents a ",(0,i.yg)("em",{parentName:"p"},"range"),".\nLet's look at the following range: ",(0,i.yg)("inlineCode",{parentName:"p"},"[a-f]"),".\nIt starts at ",(0,i.yg)("inlineCode",{parentName:"p"},"a")," and ends with ",(0,i.yg)("inlineCode",{parentName:"p"},"f"),", inclusively.\n",(0,i.yg)("inlineCode",{parentName:"p"},"[0-9]"),", for example, matches any digit.\nLikewise, ",(0,i.yg)("inlineCode",{parentName:"p"},"[A-Z]")," matches any capital letter, and so on."),(0,i.yg)("p",null,"You can combine ranges.\nFor instance, ",(0,i.yg)("inlineCode",{parentName:"p"},"[a-zA-Z]")," matches any letter."),(0,i.yg)("h2",{id:"sets"},"Sets"),(0,i.yg)("p",null,"In order to represent a set of characters to be matched, ",(0,i.yg)("inlineCode",{parentName:"p"},"{}")," are used.\n",(0,i.yg)("inlineCode",{parentName:"p"},"{a,0,m,b}")," matches ",(0,i.yg)("em",{parentName:"p"},"either")," ",(0,i.yg)("inlineCode",{parentName:"p"},"a"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"0"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"m")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"b"),"."),(0,i.yg)("h2",{id:"escaping"},"Escaping"),(0,i.yg)("p",null,"What if we want to match the ",(0,i.yg)("inlineCode",{parentName:"p"},"*")," character itself?\nOr any of the special characters above, such as ",(0,i.yg)("inlineCode",{parentName:"p"},"+"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"["),", ",(0,i.yg)("inlineCode",{parentName:"p"},"]"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"{")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"}"),"?\nObviously, we can match ",(0,i.yg)("strong",{parentName:"p"},"any")," character.\nThe special characters can be matched by ",(0,i.yg)("strong",{parentName:"p"},"escaping")," them."),(0,i.yg)("p",null,"Escaping is the practice of specifying that a symbol be interpreted as a regular character and not as part of a globbing expression.\nThis feature is achieved by placing a ",(0,i.yg)("inlineCode",{parentName:"p"},"\\")," character before any special globbing character that you want to escape.\nHere are a few examples:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"\\*"),": matches a literal ",(0,i.yg)("inlineCode",{parentName:"li"},"*"),";"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"\\["),": matches a literal ",(0,i.yg)("inlineCode",{parentName:"li"},"["),";"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"{\\+,\\}}"),": matches either a literal ",(0,i.yg)("inlineCode",{parentName:"li"},"+"),", or a literal ",(0,i.yg)("inlineCode",{parentName:"li"},"}"),".")),(0,i.yg)("p",null,"You can ",(0,i.yg)("strong",{parentName:"p"},"combine")," escaped characters and globbing expressions as you please."),(0,i.yg)("h2",{id:"redirecting-streams"},"Redirecting Streams"),(0,i.yg)("p",null,"Any process (remember that Linux commands are processes, too) uses 3 implicit data streams."),(0,i.yg)("h2",{id:"standard-input-stdin"},"Standard Input (",(0,i.yg)("inlineCode",{parentName:"h2"},"stdin"),")"),(0,i.yg)("p",null,'This is the "place" from where the process reads its data.\nMany processes read data from the keyboard:'),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"man"),"'s ",(0,i.yg)("inlineCode",{parentName:"li"},"stdin")," is the keyboard because it reads user commands and interprets them in order to navigate the current ",(0,i.yg)("inlineCode",{parentName:"li"},"man")," page."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"bash"),"'s ",(0,i.yg)("inlineCode",{parentName:"li"},"stdin")," is also the keyboard.\n",(0,i.yg)("inlineCode",{parentName:"li"},"bash")," reads user input, that is typed into the terminal and then executes those commands.")),(0,i.yg)("p",null,"The main alternative to getting input from the terminal is using a file.\nStrictly from a teaching standpoint, unless given a file, ",(0,i.yg)("inlineCode",{parentName:"p"},"cat")," reads its input from the terminal (kinda useless, we know).\nLet's showcase the usage of ",(0,i.yg)("inlineCode",{parentName:"p"},"stdin")," redirection.\nFirst, let's use ",(0,i.yg)("inlineCode",{parentName:"p"},"cat")," without redirection."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"root@kali:~# cat  # Read input from the terminal.\nSSS Rulz!\nSSS Rulz!\n^C\nroot@kali:~# # We used Ctrl + C to close the above cat process.\n")),(0,i.yg)("p",null,"Now let's redirect ",(0,i.yg)("inlineCode",{parentName:"p"},"cat"),"'s input to a file.\nWe use ",(0,i.yg)("inlineCode",{parentName:"p"},"<")," in order to redirect ",(0,i.yg)("inlineCode",{parentName:"p"},"stdin"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"root@kali:~# cat < essentials/README.md \n# Security Summer School: Security Essentials Track\n[...]\n")),(0,i.yg)("p",null,"Let's look more closely at what happens here, as opposed to running ",(0,i.yg)("inlineCode",{parentName:"p"},"cat essentials/README.md"),":"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"cat essentials/README.md")," makes the ",(0,i.yg)("inlineCode",{parentName:"li"},"cat")," command itself open the ",(0,i.yg)("inlineCode",{parentName:"li"},"essentials/README.md")," file and read bytes from it;"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"cat < essentials/README.md")," has ",(0,i.yg)("strong",{parentName:"li"},"the underlying ",(0,i.yg)("inlineCode",{parentName:"strong"},"bash")," process")," read the ",(0,i.yg)("inlineCode",{parentName:"li"},"essentials/README.md")," file and ",(0,i.yg)("strong",{parentName:"li"},"feed its content")," to ",(0,i.yg)("inlineCode",{parentName:"li"},"cat"),", which is now reading input ",(0,i.yg)("strong",{parentName:"li"},"from the underlying ",(0,i.yg)("inlineCode",{parentName:"strong"},"bash")," process"),".")),(0,i.yg)("p",null,"The same output is printed, but the mechanism now differs entirely."),(0,i.yg)("h3",{id:"standard-output-stdout"},"Standard Output (",(0,i.yg)("inlineCode",{parentName:"h3"},"stdout"),")"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"stdout")," is the complement of ",(0,i.yg)("inlineCode",{parentName:"p"},"stdin"),".\nA processes output is generally displayed to ",(0,i.yg)("inlineCode",{parentName:"p"},"stdout"),".\nGenerally, this stream is also the terminal.\nWe've already seen this feature when running almost any command so far."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"root@kali:~# ls\nDesktop    essentials           Music     Public         Videos\nDocuments  ghidra_9.1.2_PUBLIC  peda      %SystemDrive%\nDownloads  libc-database        Pictures  Templates\n")),(0,i.yg)("p",null,"We've seen this output may times in the previous session.\nThe names of the directories and files inside the current folder are printed ",(0,i.yg)("strong",{parentName:"p"},"to ",(0,i.yg)("inlineCode",{parentName:"strong"},"stdout")),", i.e. to the terminal."),(0,i.yg)("p",null,"Let's redirect ",(0,i.yg)("inlineCode",{parentName:"p"},"ls"),"'s output to a file:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"root@kali:~# ls > ls_output\n")),(0,i.yg)("p",null,"Notice that now there is ",(0,i.yg)("em",{parentName:"p"},"seemingly")," no output.\nIn reality, it does exist, but is written by ",(0,i.yg)("inlineCode",{parentName:"p"},"ls")," to the ",(0,i.yg)("inlineCode",{parentName:"p"},"ls_output")," file instead of the standard ",(0,i.yg)("inlineCode",{parentName:"p"},"stdout")," stream (the terminal)."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"root@kali:~# cat ls_output  # The same files as before. Their layout changes, though.\nDesktop\nDocuments\nDownloads\nessentials\nghidra_9.1.2_PUBLIC\nlibc-database\nMusic\nout\npeda\nPictures\nPublic\n%SystemDrive%\nTemplates\nVideos\n")),(0,i.yg)("h2",{id:"standard-error-stderr"},"Standard Error (",(0,i.yg)("inlineCode",{parentName:"h2"},"stderr"),")"),(0,i.yg)("p",null,"Sometimes commands fail.\nIf you haven't encountered one, you haven't been using Linux for long enough.\nHere's a simple error:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"root@kali:~# ls whatever\nls: cannot access 'whatever': No such file or directory\n")),(0,i.yg)("p",null,"The error message (",(0,i.yg)("inlineCode",{parentName:"p"},"ls: cannot access 'whatever': No such file or directory"),") is displayed to the terminal, so it would make sense for it to be printed by ",(0,i.yg)("inlineCode",{parentName:"p"},"ls")," to ",(0,i.yg)("inlineCode",{parentName:"p"},"stdout"),", right?\nWell... no.\nIt's printed to another stream, called ",(0,i.yg)("inlineCode",{parentName:"p"},"stderr"),".\nAs its name implies, this stream is dedicated to error messages.\nThis distinction was made in order for users to be able to separate between useful / legitimate output and sometimes unimportant error messages."),(0,i.yg)("p",null,"Redirecting ",(0,i.yg)("inlineCode",{parentName:"p"},"stderr")," is performed using 2 characters: ",(0,i.yg)("inlineCode",{parentName:"p"},"2>"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"root@kali:~# ls whatever 2> ls_error\nroot@kali:~# # No error message. The error itself still did happen.\nroot@kali:~# cat ls_error  # I told you so...\nls: cannot access 'whatever': No such file or directory\n")),(0,i.yg)("h2",{id:"appending"},"Appending"),(0,i.yg)("p",null,"Let's redirect ",(0,i.yg)("inlineCode",{parentName:"p"},"ls"),"'s output multiple times:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"root@kali:~# ls essentials > out\nroot@kali:~# cat out\napplication-lifetime\nassembly-language\nbinary-analysis\ndata-representation\ndata-security\nexplaining-the-internet\nhacking-the-web\nREADME.md\nrediscovering-the-browser\nsystem-exploration\ntaming-the-stack\nwelcome-to-linux\nroot@kali:~# ls > out\nroot@kali:~# cat out\nDesktop\nDocuments\nDownloads\nessentials\nghidra_9.1.2_PUBLIC\nlibc-database\nMusic\nout\npeda\nPictures\nPublic\n%SystemDrive%\nTemplates\nVideos\n")),(0,i.yg)("p",null,"As you can see, when the second ",(0,i.yg)("inlineCode",{parentName:"p"},"ls")," output is written to the ",(0,i.yg)("inlineCode",{parentName:"p"},"out")," file, the first output is ",(0,i.yg)("strong",{parentName:"p"},"overwritten"),".\nThis sucks in case we want to generate large output files, such as logs."),(0,i.yg)("p",null,"But fear not!\nInstead, remember last session's Python crash course.\nMore specifically, remember ",(0,i.yg)("inlineCode",{parentName:"p"},"open"),"'s parameters.\nThe second one was ",(0,i.yg)("inlineCode",{parentName:"p"},"mode")," and one of the modes is ",(0,i.yg)("em",{parentName:"p"},"append"),", symbolised by the ",(0,i.yg)("inlineCode",{parentName:"p"},"a")," character.\nThis mode makes any text that's written to that specific file to be added at the end of whatever data was already inside it, without overwriting anything."),(0,i.yg)("p",null,"We need something similar to that, which can be achieved by using ",(0,i.yg)("inlineCode",{parentName:"p"},">>")," for redirecting ",(0,i.yg)("inlineCode",{parentName:"p"},"stdin")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"2>>")," for redirecting ",(0,i.yg)("inlineCode",{parentName:"p"},"stderr"),".\nHere's how it works for the previous ",(0,i.yg)("inlineCode",{parentName:"p"},"ls")," commands:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"root@kali:~# ls essentials > out  # This command also creates the out file. It is irrelevant whether we use > or >>.\nroot@kali:~# cat out\napplication-lifetime\nassembly-language\nbinary-analysis\ndata-representation\ndata-security\nexplaining-the-internet\nhacking-the-web\nREADME.md\nrediscovering-the-browser\nsystem-exploration\ntaming-the-stack\nwelcome-to-linux\nroot@kali:~# ls >> out  # This is where the overwriting took place. We've now changed command to use >>.\nroot@kali:~# cat out\napplication-lifetime\n[...]\nVideos\n")),(0,i.yg)("p",null,"Lovely!"),(0,i.yg)("h2",{id:"pipes"},"Pipes"),(0,i.yg)("p",null,"Up to now, we've looked at how to redirect the basic streams of a process to files.\nBut what if we wanted to redirect ",(0,i.yg)("strong",{parentName:"p"},"one stream of a process into the stream of another process"),"?\nOf course we can do this, too, by using the ",(0,i.yg)("strong",{parentName:"p"},"pipe")," (",(0,i.yg)("inlineCode",{parentName:"p"},"|"),")."),(0,i.yg)("p",null,"To demonstrate the usage of pipes, we'll introduces the ",(0,i.yg)("inlineCode",{parentName:"p"},"tac")," command.\nNotice it's ",(0,i.yg)("inlineCode",{parentName:"p"},"cat")," in reverse.\nThis is not arbitrary.\nIf ",(0,i.yg)("inlineCode",{parentName:"p"},"cat")," displays the ",(0,i.yg)("strong",{parentName:"p"},"lines")," in a file ",(0,i.yg)("strong",{parentName:"p"},"in order"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"tac")," does the same, but ",(0,i.yg)("strong",{parentName:"p"},"in reverse order"),".\nLet's exemplify using the global ",(0,i.yg)("inlineCode",{parentName:"p"},"README.md"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"root@kali:~# tac essentials/README.md\n1. [Taming the Stack](./taming-the-stack)\n1. [Assembly Language](./assembly-language)\n1. [Binary Analysis](./binary-analysis)\n1. [Application Lifetime](./application-lifetime)\n1. [Data Security](./data-security)\n1. [Data Representation](./data-representation)\n1. [Hacking the Web](./hacking-the-web)\n1. [(Re)Discovering the Browser](./rediscovering-the-browser)\n1. [Explaining the Internet](./explaining-the-internet)\n1. [System Exploration](./system-exploration)\n1. [Welcome to Linux](./welcome-to-linux)\nSessions are:\n\nThere, you will find a `README.md` file with the session documentation and, if it's the case, subfolders with support data for the challenges.\nEach session is located in its specific folder.\n\nWelcome to the Security Essentials Track of the Security Summer School.\n\n# Security Summer School: Security Essentials Track\n")),(0,i.yg)("p",null,"Now let's actually use a pipe.\nWe'll also use a command from before, so we keep things simple.\nLet's find all Linux kernel header files whose names contain the word \"group\" and then print them ",(0,i.yg)("strong",{parentName:"p"},"in reverse order"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"find /usr/src/linux-headers-5.6.0-kali2-common -name *group* | tac\n")),(0,i.yg)("p",null,"Notice this output is the one you saw in section ",(0,i.yg)("a",{parentName:"p",href:"#-0-or-more-characters"},(0,i.yg)("inlineCode",{parentName:"a"},"*"),": 0 or more characters"),", but in reverse."),(0,i.yg)("h2",{id:"xargs"},(0,i.yg)("inlineCode",{parentName:"h2"},"xargs")),(0,i.yg)("p",null,"We've seen how powerful pipes are.\nRemember that pipes redirect the ",(0,i.yg)("inlineCode",{parentName:"p"},"stdout")," of the first command into the second's ",(0,i.yg)("inlineCode",{parentName:"p"},"stdin"),".\nBut what if we wanted to redirect the same ",(0,i.yg)("inlineCode",{parentName:"p"},"stdout")," as command-line parameters for the second command?"),(0,i.yg)("p",null,"This is when we would use ",(0,i.yg)("inlineCode",{parentName:"p"},"| xargs"),".\nLet's assume this hypothetical command:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"cmd1 | xargs cmd2\n")),(0,i.yg)("p",null,"where ",(0,i.yg)("inlineCode",{parentName:"p"},"cmd1")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"cmd2")," are hypothetical commands.\nThe ",(0,i.yg)("inlineCode",{parentName:"p"},"| xargs")," keyword makes ",(0,i.yg)("strong",{parentName:"p"},"every line")," from the ",(0,i.yg)("inlineCode",{parentName:"p"},"stdout")," of ",(0,i.yg)("inlineCode",{parentName:"p"},"cmd1")," be passed ",(0,i.yg)("strong",{parentName:"p"},"as a separate parameter")," to ",(0,i.yg)("inlineCode",{parentName:"p"},"cmd2"),"."),(0,i.yg)("p",null,"A very powerful use case of ",(0,i.yg)("inlineCode",{parentName:"p"},"xargs")," is ",(0,i.yg)("inlineCode",{parentName:"p"},"find ... | xargs grep ..."),".\nSuch commands allow us to look for strings in all files that match certain criteria ",(0,i.yg)("strong",{parentName:"p"},"at once"),".\nLet's showcase this by inspecting all log files about the ",(0,i.yg)("inlineCode",{parentName:"p"},"systemd")," process:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"# find /var/log -type f -name *log | xargs grep systemd\n")),(0,i.yg)("h2",{id:"less-is-more"},"Less is More"),(0,i.yg)("p",null,"Try running the following command:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"root@kali:~# tree -L 2 /\n")),(0,i.yg)("p",null,"You can see that its output is rather huge.\nFor large directory hierarchies, ",(0,i.yg)("inlineCode",{parentName:"p"},"tree"),"'s output can be overwhelming.\nThe same thing can happen when running ",(0,i.yg)("inlineCode",{parentName:"p"},"find")," commands."),(0,i.yg)("p",null,"We've already seen how we can trim such outputs down by ",(0,i.yg)("inlineCode",{parentName:"p"},"grep"),", but sometimes we have no criterion on which to do so.\nIn these situations, we have no alternative but to look at the entire output.\nIn order to do so in more easily, we can use the ",(0,i.yg)("inlineCode",{parentName:"p"},"less")," command."),(0,i.yg)("p",null,"First of all, ",(0,i.yg)("inlineCode",{parentName:"p"},"less")," can be used just like you would use ",(0,i.yg)("inlineCode",{parentName:"p"},"cat"),".\nRun the commands below.\nYou can navigate inside ",(0,i.yg)("inlineCode",{parentName:"p"},"less")," the same way you can navigate inside ",(0,i.yg)("inlineCode",{parentName:"p"},"man"),".\n",(0,i.yg)("strong",{parentName:"p"},"And you definitely remember how to navigate inside ",(0,i.yg)("inlineCode",{parentName:"strong"},"man"),"!")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"root@kali:~# cat /var/log/syslog  # Never ending logs...\n[...]\nroot@kali:~# less /var/log/syslog  # Much better.\n")),(0,i.yg)("p",null,"Inside ",(0,i.yg)("inlineCode",{parentName:"p"},"less"),', try searching for the string "network".'),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Remember:")," Don't scroll your terminal.\nIt doesn't look cool.\nUse ",(0,i.yg)("inlineCode",{parentName:"p"},"less"),"!"),(0,i.yg)("h2",{id:"grep"},"Grep"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"find")," has taught us how to use various criteria in order to filter through a file hierarchy.\nThis is definitely useful, but we can do better.\n",(0,i.yg)("inlineCode",{parentName:"p"},"find")," is highly capable of filtering output based on the files' ",(0,i.yg)("strong",{parentName:"p"},"metadata"),', i.e. "surface level" information, such as sizes, names and so on.'),(0,i.yg)("p",null,"It would be really useful if we had a means to filter files ",(0,i.yg)("strong",{parentName:"p"},"based on their content"),".\nAnd we do!\nThis tool is called ",(0,i.yg)("inlineCode",{parentName:"p"},"grep"),".\n",(0,i.yg)("inlineCode",{parentName:"p"},"grep")," is capable of matching strings based on the contents of files, not just on their names."),(0,i.yg)("p",null,"Let's look for the ",(0,i.yg)("inlineCode",{parentName:"p"},"stdin")," string in this README:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"root@kali:~# grep \"stdin\" essentials/system-exploration/README.md\n#### Standard Input (`stdin`)\n- `man`'s `stdin` is the keyboard because it reads user commands and interprets them in order to navigate the current `man` page.\n- `bash`'s `stdin` is also the keyboard.\nLet's showcase the usage of `stdin` redirection.\nWe use `<` in order to redirect `stdin`.\n`stdout` is the complement of `stdin`.\nWe need something similar to that, which can be achieved by using `>>` for redirecting `stdin` and `2>>` for redirecting `stderr`.\n")),(0,i.yg)("p",null,"As you can see, ",(0,i.yg)("inlineCode",{parentName:"p"},"grep")," outputs the ",(0,i.yg)("strong",{parentName:"p"},"lines that contain the given string"),".\nThis makes ",(0,i.yg)("inlineCode",{parentName:"p"},"grep")," extremely useful for looking for CTF flags.\nWe simply need to ",(0,i.yg)("inlineCode",{parentName:"p"},'grep "SSS"'),"."),(0,i.yg)("h2",{id:"grep-a-file-hierarchy"},"Grep a File Hierarchy"),(0,i.yg)("p",null,"At this point, you may be tempted to believe that we can only ",(0,i.yg)("inlineCode",{parentName:"p"},"grep")," a single file.\nNope.\nWe can even ",(0,i.yg)("inlineCode",{parentName:"p"},"grep")," strings in entire file hierarchies, which is extremely powerful."),(0,i.yg)("p",null,"Let's ",(0,i.yg)("inlineCode",{parentName:"p"},"grep")," the ",(0,i.yg)("inlineCode",{parentName:"p"},"task_struct")," symbol in our kernel's header files.\nThis symbol is a C ",(0,i.yg)("inlineCode",{parentName:"p"},"struct")," that contains all the information associated with any Linux process."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},'root@kali:~# grep -R "task_struct" /usr/src/linux-headers-5.6.0-kali2-common | less  # The output is rather large, so we contain it with less.\n')),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Remember this distinction:")," ",(0,i.yg)("inlineCode",{parentName:"p"},"find")," looks for file ",(0,i.yg)("strong",{parentName:"p"},"metadata")," (names, permissions, size, type), while ",(0,i.yg)("inlineCode",{parentName:"p"},"grep")," looks for file ",(0,i.yg)("strong",{parentName:"p"},"data"),"."))}g.isMDXComponent=!0}}]);