"use strict";(self.webpackChunkessentials_security=self.webpackChunkessentials_security||[]).push([[2700],{5680:(e,n,t)=>{t.d(n,{xA:()=>g,yg:()=>y});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},g=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,g=i(e,["components","mdxType","originalType","parentName"]),p=c(t),u=r,y=p["".concat(l,".").concat(u)]||p[u]||d[u]||s;return t?a.createElement(y,o(o({ref:n},g),{},{components:t})):a.createElement(y,o({ref:n},g))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,o=new Array(s);o[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[p]="string"==typeof e?e:r,o[1]=i;for(var c=2;c<s;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8471:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var a=t(8168),r=(t(6540),t(5680));const s={},o="Character Encoding",i={unversionedId:"Data/Data Representation/Reading/character-encoding",id:"Data/Data Representation/Reading/character-encoding",title:"Character Encoding",description:"ASCII",source:"@site/docs/Data/Data Representation/Reading/character-encoding.md",sourceDirName:"Data/Data Representation/Reading",slug:"/Data/Data Representation/Reading/character-encoding",permalink:"/essentials-security/13/Data/Data Representation/Reading/character-encoding",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Data Formats",permalink:"/essentials-security/13/Data/Data Representation/Reading/data-formats"},next:{title:"Hashing",permalink:"/essentials-security/13/Data/Data Representation/Reading/hashing"}},l={},c=[{value:"ASCII",id:"ascii",level:2},{value:"Base64",id:"base64",level:2}],g={toc:c},p="wrapper";function d(e){let{components:n,...t}=e;return(0,r.yg)(p,(0,a.A)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"character-encoding"},"Character Encoding"),(0,r.yg)("h2",{id:"ascii"},"ASCII"),(0,r.yg)("p",null,"ASCII (American Standard Code for Information Interchange):\nGoing from 0 - 127"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-text"},"DEC HEX ASCII      DEC HEX ASCII      DEC HEX ASCII       DEC HEX ASCII       DEC HEX ASCII\n0   00  NUL        26 1A  SUB         52  34  4           78  4E  N           104 68  h\n1   01  SOH        27 1B  ESC         53  35  5           79  4F  O           105 69  i\n2   02 STX         28 1C  FS          54  36  6           80  50  P           106 6A  j\n3   03 ETX         29 1D  GS          55  37  7           81  51  Q           107 6B  k\n4   04 EOT         30 1E  RS          56  38  8           82  52  R           108 6C  l\n5   05 ENQ         31 1F  US          57  39  9           83  53  S           109 6D  m\n6   06 ACK         32 20  SPACE       58  3A  :           84  54  T           110 6E  n\n7   07 BEL         33 21  !           59  3B  ;           85  55  U           111 6F  o\n8   08 BS          34 22  \"           60  3C  <           86  56  V           112 70  p\n9   09 HT          35 23  #           61  3D  =           87  57  W           113 71  q\n10  0A LF          36 24  $           62  3E  >           88  58  X           114 72  r\n11  0B VT          37 25  %           63  3F  ?           89  59  Y           115 73  s\n12  0C FF          38 26  &           64  40  @           90  5A  Z           116 74  t\n13  0D CR          39 27  '           65  41  A           91  5B  [           117 75  u\n14  0E SO          40 28  (           66  42  B           92  5C  \\           118 76  v\n15  0F SI          41 29  )           67  43  C           93  5D  ]           119 77  w\n16  10 DLE         42 2A  *           68  44  D           94  5E  ^           120 78  x\n17  11 DC1         43 2B  +           69  45  E           95  5F  _           121 79  y\n18  12 DC2         44 2C  ,           70  46  F           96  60  `           122 7A  z\n19  13 DC3         45 2D  -           71  47  G           97  61  a           123 7B  {\n20  14 DC4         46 2E  .           72  48  H           98  62  b           124 7C  |\n21  15 NAK         47 2F  /           73  49  I           99  63  c           125 7D  }\n22  16 SYN         48 30  0           74  4A  J           100 64  d           126 7E  ~\n23  17 ETB         49 31  1           75  4B  K           101 65  e           127 7F\n24  18 CAN         50 32  2           76  4C  L           102 66  f\n25  19 EM          51 33  3           77  4D  M           103 67  g\n")),(0,r.yg)("p",null,"We can see that by adding 32 to an uppercase letter, we get that same letter in lowercase:\ne.g. ",(0,r.yg)("inlineCode",{parentName:"p"},"E + 32 = e")),(0,r.yg)("p",null,"Below, you can see the built-in Python functions ",(0,r.yg)("inlineCode",{parentName:"p"},"ord")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"chr")," that help us determine what character coresponds to a certain ASCII code and what ASCII code a character has."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-py"},">>> ord('E')\n69\n>>> chr(69)\n'E'\n>>> chr(ord('E') + 32)\n'e'\n>>> chr(ord('e') - 32)\n'E'\n>>>\n")),(0,r.yg)("p",null,"In terms of storage efficiency, we can encode\n",(0,r.yg)("inlineCode",{parentName:"p"},"UTF-8")," for ASCII text (English and other Western languages)\n",(0,r.yg)("inlineCode",{parentName:"p"},"UTF-16")," for non-ASCII text (Chinese and other Asian languages)"),(0,r.yg)("p",null,"Let's say we have a string in Chinese. With Python, we can get the hex bytes of the string, using the built-in function ",(0,r.yg)("inlineCode",{parentName:"p"},"str.encode()"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-py"},'Str = ("\u8001\u677f")\nprint(Str)\n\nStr = (("\u8001\u677f").encode("utf-8"))\nprint(Str)\n')),(0,r.yg)("p",null,"The output will be:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-text"},"\u8001\u677f\nb'\\xe8\\x80\\x81\\xe6\\x9d\\xbf'\n")),(0,r.yg)("p",null,"If we want to get back to the original string, we will execute:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-py"},"print((Str.decode()))\n")),(0,r.yg)("p",null,"And we will get:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-text"},"\u8001\u677f\n")),(0,r.yg)("h2",{id:"base64"},"Base64"),(0,r.yg)("p",null,"Base64 is a way of representing binary data in sequences of 24 bits (3 bytes) that can be represented by 4 Base64 digits."),(0,r.yg)("p",null,"Base64 Encoding Table:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-text"},"Index   Char      Index   Char      Index   Char      Index   Char\n0       A         16      Q         32      g         48      w\n1       B         17      R         33      h         49      x\n2       C         18      S         34      i         50      y\n3       D         19      T         35      j         51      z\n4       E         20      U         36      k         52      0\n5       F         21      V         37      l         53      1\n6       G         22      W         38      m         54      2\n7       H         23      X         39      n         55      3\n8       I         24      Y         40      o         56      4\n9       J         25      Z         41      p         57      5\n10      K         26      a         42      q         58      6\n11      L         27      b         43      r         59      7\n12      M         28      c         44      s         60      8\n13      N         29      d         45      t         61      9\n14      O         30      e         46      u         62      +\n15      P         31      f         47      v         63      /\n")),(0,r.yg)("p",null,"If we want to convert to and from Base64 in Python we can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"base64")," module:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-py"},"import base64\n\nmessage = \"Some random message\"\nmessage_bytes = message.encode('ascii') # We transform the string to \"b'Some random message'\", making it a sequence of bytes\nbase64_bytes = base64.b64encode(message_bytes)\nbase64_message = base64_bytes.decode('ascii') # We do the opposite of the previous process, now eliminating \"b''\", to make it a string\n\nprint(base64_message)\n")),(0,r.yg)("p",null,"Thus getting us to the base64 string:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-text"},"U29tZSByYW5kb20gbWVzc2FnZQ==\n")),(0,r.yg)("p",null,"If we would want to decode it, we would have to simply revert the commands as follows:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-py"},"import base64\n\nbase64_message = 'U29tZSByYW5kb20gbWVzc2FnZQ=='\nbase64_bytes = base64_message.encode('ascii')\nmessage_bytes = base64.b64decode(base64_bytes)\nmessage = message_bytes.decode('ascii')\n\nprint(message)\n")),(0,r.yg)("p",null,"Which will get us back to:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-text"},"Some random message\n")),(0,r.yg)("p",null,'As you can see, some Base64 strings have "=" at the end, some have "==" and others have nothing uncommon.\nSince Base64 represents binary data in 3 bytes, we should also know how to treat the case when the length is not divisible by 3.\nAs a consequence, there is output padding for Base64 as follows:'),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-text"},'length % 3 = 1 => "=="\nlength % 3 = 2 => "="\nlength % 3 = 0 => no padding\n')),(0,r.yg)("p",null,"The following can be used to better understand output padding:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-py"},'import base64\n\ntext1 = "SecuritySummmerSch"\ntext2 = "SecuritySummmerScho"\ntext3 = "SecuritySummmerSchoo"\ntext4 = "SecuritySummmerSchool"\n\nb64_text1 = (base64.b64encode(text1.encode(\'ascii\'))).decode(\'ascii\')\nb64_text2 = (base64.b64encode(text2.encode(\'ascii\'))).decode(\'ascii\')\nb64_text3 = (base64.b64encode(text3.encode(\'ascii\'))).decode(\'ascii\')\nb64_text4 = (base64.b64encode(text4.encode(\'ascii\'))).decode(\'ascii\')\n\nprint(f"Plain text\\t\\tPT length\\tBase64 text\\t\\t\\tB64 length")\nprint(f"{text1}\\t{len(text1)}\\t\\t{b64_text1}\\t{len(b64_text1)}")\nprint(f"{text2}\\t{len(text2)}\\t\\t{b64_text2}\\t{len(b64_text2)}")\nprint(f"{text3}\\t{len(text3)}\\t\\t{b64_text3}\\t{len(b64_text3)}")\nprint(f"{text4}\\t{len(text4)}\\t\\t{b64_text4}\\t{len(b64_text4)}")\n')),(0,r.yg)("p",null,"We get:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-html"},"Plain text              PT length       Base64 text                     B64 length\nSecuritySummmerSch      18              U2VjdXJpdHlTdW1tbWVyU2No        24\nSecuritySummmerScho     19              U2VjdXJpdHlTdW1tbWVyU2Nobw==    28\nSecuritySummmerSchoo    20              U2VjdXJpdHlTdW1tbWVyU2Nob28=    28\nSecuritySummmerSchool   21              U2VjdXJpdHlTdW1tbWVyU2Nob29s    28\n")),(0,r.yg)("p",null,"Try decoding yourself!"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-text"},"SGVsbG8gZnJvbSB0aGUgRWFydGgtNjQgIQ==\n")))}d.isMDXComponent=!0}}]);